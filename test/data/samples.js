
var samples = 
[ 'named &amp; char ref in data'
, 'non-terminated named charref in data char ref in &amp data'
, 'non-terminated named charref in data char ref in &ampa data'
, 'hexadecimal charref in data hexadecimal ref &#xccc; in data'
, 'non-terminated Hexadecimal charref in data hexadecimal ref &#xccc in data'
, 'decimal charref in data decimal ref &#1092; in data'
, 'non-terminated Decimal charref in data decimal ref &#110 in data'
, 'special charref <input value=asda&not*=c></input>'
, 'special charref <input value=asda&not=c></input>'
, 'special charref <input value="asda&notit; I tell you"></input>'
, 'non-special charref <input value=asda&notin*=c></input>'
, 'non-special charref <input value=asda&notin=c></input>'
, 'non-special charref <input value=asda&notin;=c></input>'
, 'special charref in data &not*=c'
, 'special charref in data &not=c'
, 'special charref in data &notit; I tell you'
, 'non-special charref in data charref &notin*=c'
, 'non-special charref in data charref &notin=c'
, 'non-special charref in data charref &notin;=c'
, 'named charref in attribute <input value="you &amp; me"/> and more'
, 'named charref in attribute <input value=\'you &amp; me\'/> and more'
, 'named charref in attribute <input value=you&#12me /> and more'
, 'named charref in attribute <input value=&amp;me /> and more'
, 'named charref in attribute <input value=&amp attr=val /> and more'
, 'named charref in attribute <input value=&ampo attr=val /> and more'
, 'bogus charref in attribute <input value="you &# am me"/> and more'
, 'bogus charref in attribute <input value=\'you &# amp me\'/> and more'
, 'bogus charref in attribute <input value=you&x ampme /> and more'
, 'rcdata <textarea> asdf & &amp; <textareaNot </textarea> and more'
, 'rcdata2 <textarea> asdf & &amp; </textarea( and not ending> it'
, 'rcdata3 <textarea> asdf & &amp; </textarea/ and ending> it, see <span>yes</span>'
, 'rcdata5 <textarea/> asdf & &amp and NOT ending < it, see <span>yes</span>'
, 'rcdata4 <textarea> asdf & &amp; </textarea and ending> it'
, 'rawtext <script> asdf &amp; <span> </scriptNot </script> and more'
, 'rawtext2 <script> asdf &amp; <span> </script( and> not ending it <span>'
, 'rawtext3 <script> asdf &amp; <span> </script/ and> ending it <span> see'
, 'rawtext4 <script> asdf &amp; <span> </script and ending it <span> see'
, 'script <!doctype html>hello <script><!-- asdf</script> thus'
, 'nonalpha tag This is not a <ém attr>tag</ém>'
, 'double open tag A double less than sign <<div attr>content</div>'
, 'bad end tag <div style=color:blue> This is blue </ div> And this too!'
, 'comment1 comment <!-- with -> within --> and subsequent data'
, 'comment2 comment <!-- with bogus end -> and subsequent data'
, 'comment3 <!-- Comment with -- double dash within --> and subsequent data'
, 'comment4 <!-- Comment with --!- weird stuff within --> and subsequent data'
, 'comment5 <!-- Comment with strange end --!> and subsequent data'
, 'comment6 <!--!> and such'
, 'comment7 <!--> and such'
, 'comment8 <!-> and such'
, 'comment9 <!---!> and such'
, 'comment10 <!----!> and such'
, 'missing space attribues connected <div name="a"name="b" >'
, 'nonalpha attribute weird template tag <div {name="a" name="b" >'
, 'bogus1 bogus comment <! with end !@> and subsequent data'
, 'bogus2 bogus comment </ with end !@> and subsequent data'
, 'bogus3 bogus comment <? with end !@> and subsequent data'
, 'bogus4 bogus comment <!- with end -> and subsequent data'
, 'bogus5 An empty bogus comment <!>'
, 'invalidMD <!weird markup declaration>'
, 'normalHtml This is <span class = "s1">html</span> Yeah!'
, 'autocloseAttempt This is <span / attr >html</span> Yeah!'
, 'closePlaintext hi <plaintext>asd<as &ap, </plaintext> cannot be ended'
, 'unescaped ampersand  data & such'
, 'unescaped ampersand Hash data &# such'
, 'unescaped ampersand HashEx data &#x such'
, 'unescaped ampersand HashExZed data &#xz such'
, 'hexDigits data &#xa such'
, 'decimal charref data &#1 such'
, 'named charref data &name such'
, 'ampHash data &amp;# such'
, 'slashes <span/////name////=/blabla>'
, 'weirdEquals <span attr = / asd >content</span>'
, 'weirdEquals2 <span attr = @ asd >content</span>'
, 'weirdEquals3 <span attr /= asd >content</span>'
, 'weirdEquals4 <span attr @= asd >content</span>'
, 'dangerousSlash1 <span name=/ >asdf'
, 'dangerousSlash2 <span name=/>asdf'
, 'dangerousSlash3 <span name= / />asdf'
, 'missingValue <span name=>asdf'
, 'invalidAttributeValue1 <div class= =at >'
, 'invalidAttributeValue2 <div class= <at >'
, 'invalidAttributeValue3 <div class= `at >'
]


var EOFSamples =
[ 'data state eof in da'
, 'tagOpen state eof in <'
, 'tagName state eof in <d'
, 'selfClosingStartTag state in <div /'
, 'endTagOpen state in </a'
, 'beforeAttributeName state <div '
, 'attributeName state <div at'
, 'afterAttributeName state <div attr '
, 'beforeAttributeValue state <div attr ='
, 'attributeValueDoubleQuoted state <div attr="te'
, 'attributeValueSingleQuoted state <div attr=\'te'
, 'attributeValueUnquoted state <div attr=te'
, 'afterAttributeValueQuoted state <div attr="test"'
, 'markupDeclarationOpen state a markup decl <!'
, 'selfClosingTag state An eof after a / <span /'
, 'commentStart state a comment start <!--'
, 'commentStartDash state a comment start dash <!---'
, 'comment state a comment <!-- hello th'
, 'commentEndDash state a comment end dash <!-- hello th -'
, 'commentEnd state a comment end <!-- hello th --'
, 'commentEndBang state a comment end bang <!-- hello th --!'
, 'bogusComment state <! bogus comment'
, 'charRefIn_ state data &'
, 'numericCharRef state data &#'
, 'hexadecimalCharRef state data &#x'
, 'hexDigits state data &#x1a'
, 'decimalCharRef state data &#1'
, 'namedCharRef state data &name'
, 'namedCharRefInAttr state <span attr="asd&amp;a&b c">text</span>'
, 'namedCharRefInData state named charref in data asd&amp;a&b cde'
, 'rawtext state eof in raw text <script> funct'
, 'plaintext state eof in raw text <plaintext> asdf'
, 'rawtextLessThanSign state eof in raw text less than sign <script> if (i<'
, 'rawtextEndTagOpen state eof in raw text end tag open <script> asdf </'
]

module.exports = 
{ samples: samples
, EOFSamples: EOFSamples
}